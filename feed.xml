<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://jenovas.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jenovas.github.io/" rel="alternate" type="text/html" /><updated>2025-05-07T21:18:18+02:00</updated><id>https://jenovas.github.io/feed.xml</id><title type="html">Rafael Skubisz</title><subtitle>Developer, writer, open‑source enthusiast</subtitle><author><name>Rafael Skubisz</name></author><entry><title type="html">MVVM vs MVI in Android Development: Finding the Right Fit for Your Compose App</title><link href="https://jenovas.github.io/2025-04-26-mvvm-vs-mvi/" rel="alternate" type="text/html" title="MVVM vs MVI in Android Development: Finding the Right Fit for Your Compose App" /><published>2025-04-26T22:07:00+02:00</published><updated>2025-04-26T22:07:00+02:00</updated><id>https://jenovas.github.io/mvvm-vs-mvi</id><content type="html" xml:base="https://jenovas.github.io/2025-04-26-mvvm-vs-mvi/"><![CDATA[<p>The battle between MVVM and MVI never ends! Can they not coexist? Like a quote I like “Make Lovecraft Not Warcraft” we’ll try today to do just that.
If you’ve been using Jetpack Compose, you probably heard about MVVM and MVI. Both patterns help improve state management and testability, but they have different approaches when it comes to events and state changes. Today we’ll explore how each one works, show a simple example, and decide which one is the one true king of patterns! Or maybe both are?</p>

<!--more-->

<hr />

<h2 id="why-architecture-matters">Why Architecture Matters</h2>

<p>Let’s start at the very beginning. Why should I even care about architecture? As your screens grow, a clear architecture pattern helps with managing state, flows, makes code easier to read, understand, maintain, test and debug it also helps reduce the amount of bugs. MVVM and MVI are similar in a way as they both enforce a unidirectional data flow:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Business logic → UI state → Composable
User action → Event/Intent → Business logic
</code></pre></div></div>

<p>This ensures Compose always observes a single source of truth.</p>

<hr />

<h2 id="1-a-quick-look-at-mvvm">1. A Quick Look at MVVM</h2>

<p>In MVVM (<code class="language-plaintext highlighter-rouge">Model - View - ViewModel</code>):</p>

<ol>
  <li>You keep UI states in a ViewModel (<code class="language-plaintext highlighter-rouge">LiveData</code> or <code class="language-plaintext highlighter-rouge">StateFlow</code>).</li>
  <li>Composables collects or observes those states and recompose on changes.</li>
  <li>UI events (button taps, form submissions) call ViewModel methods directly.</li>
  <li>You have multiple states that are all exposed and collected by Composables.</li>
</ol>

<p>Here is an example:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// ViewModel</span>
<span class="kd">class</span> <span class="nc">CounterViewModel</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_isLoading</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">Boolean</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_isLoading</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>
    
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_data</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="nc">MyData</span><span class="p">())</span>
    <span class="kd">val</span> <span class="py">data</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">MyData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_data</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">_error</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">error</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_error</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">_counter</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">counter</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_counter</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">=</span> <span class="n">_counter</span><span class="p">.</span><span class="nf">update</span> <span class="p">{</span> <span class="n">it</span> <span class="p">+</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="k">fun</span> <span class="nf">decrement</span><span class="p">()</span> <span class="p">=</span> <span class="n">_counter</span><span class="p">.</span><span class="nf">update</span> <span class="p">{</span> <span class="n">it</span> <span class="p">-</span> <span class="mi">1</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Composable</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">CounterScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="nc">CounterViewModel</span> <span class="p">=</span> <span class="nf">viewModel</span><span class="p">())</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">isLoading</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">isLoading</span><span class="p">.</span><span class="nf">collectAsState</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">data</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">collectAsState</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">error</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="nf">collectAsState</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">counter</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">counter</span><span class="p">.</span><span class="nf">collectAsState</span><span class="p">()</span>

    <span class="nc">Column</span><span class="p">(</span>
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">(),</span>
        <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterHorizontally</span><span class="p">,</span>
        <span class="n">verticalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Center</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Count: ${counter}"</span><span class="p">)</span>
        <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">height</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>
        <span class="nc">Row</span> <span class="p">{</span>
            <span class="nc">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">viewModel</span><span class="p">.</span><span class="nf">decrement</span><span class="p">()</span> <span class="p">})</span> <span class="p">{</span> <span class="nc">Text</span><span class="p">(</span><span class="s">"-"</span><span class="p">)</span> <span class="p">}</span>
            <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">width</span><span class="p">(</span><span class="mi">8</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>
            <span class="nc">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">viewModel</span><span class="p">.</span><span class="nf">increment</span><span class="p">()</span> <span class="p">})</span> <span class="p">{</span> <span class="nc">Text</span><span class="p">(</span><span class="s">"+"</span><span class="p">)</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Why MVVM?</strong></p>
<ul>
  <li>Familiar setup for many Android developers.</li>
  <li>Quick to implement for simple screens.</li>
  <li>Clear separation: ViewModel handles logic, Composable handles rendering.</li>
</ul>

<hr />

<h2 id="2-stepping-through-mvi">2. Stepping Through MVI</h2>

<p>In MVI (<code class="language-plaintext highlighter-rouge">Model - View - Intent</code>), every user interaction is an <strong>Intent</strong>, and you reduce that intent into a new, immutable <strong>UiState</strong>. The flow looks like:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User action → Intent → Reducer → UiState → UI
</code></pre></div></div>

<p>Here’s the same example as MVI:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// Intents</span>
<span class="k">sealed</span> <span class="kd">class</span> <span class="nc">CounterIntent</span> <span class="p">{</span>
    <span class="kd">object</span> <span class="nc">Increment</span> <span class="p">:</span> <span class="nc">CounterIntent</span><span class="p">()</span>
    <span class="kd">object</span> <span class="nc">Decrement</span> <span class="p">:</span> <span class="nc">CounterIntent</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// UI state</span>
<span class="kd">data class</span> <span class="nc">CounterUIState</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">count</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">error</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">data</span><span class="p">:</span> <span class="nc">MyData</span> <span class="p">=</span> <span class="nc">MyData</span><span class="p">()</span>
<span class="p">)</span>

<span class="c1">// ViewModel</span>
<span class="kd">class</span> <span class="nc">CounterMviViewModel</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="nc">CounterUIState</span><span class="p">())</span>
    <span class="kd">val</span> <span class="py">state</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">CounterUIState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="nc">CounterIntent</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">intent</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">CounterIntent</span><span class="p">.</span><span class="nc">Increment</span> <span class="p">-&gt;</span> <span class="n">_state</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">count</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">count</span> <span class="p">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="nc">CounterIntent</span><span class="p">.</span><span class="nc">Decrement</span> <span class="p">-&gt;</span> <span class="n">_state</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">count</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">count</span> <span class="p">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Composable</span>
<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">CounterMviScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="nc">CounterMviViewModel</span> <span class="p">=</span> <span class="nf">viewModel</span><span class="p">())</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">uiState</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="nf">collectAsState</span><span class="p">()</span>

    <span class="nc">Column</span><span class="p">(</span>
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">(),</span>
        <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterHorizontally</span><span class="p">,</span>
        <span class="n">verticalArrangement</span> <span class="p">=</span> <span class="nc">Arrangement</span><span class="p">.</span><span class="nc">Center</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Count: ${uiState.count}"</span><span class="p">)</span>
        <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">height</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>
        <span class="nc">Row</span> <span class="p">{</span>
            <span class="nc">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">viewModel</span><span class="p">.</span><span class="nf">onIntent</span><span class="p">(</span><span class="nc">CounterIntent</span><span class="p">.</span><span class="nc">Decrement</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span> <span class="nc">Text</span><span class="p">(</span><span class="s">"-"</span><span class="p">)</span> <span class="p">}</span>
            <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">width</span><span class="p">(</span><span class="mi">8</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>
            <span class="nc">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">viewModel</span><span class="p">.</span><span class="nf">onIntent</span><span class="p">(</span><span class="nc">CounterIntent</span><span class="p">.</span><span class="nc">Increment</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span> <span class="nc">Text</span><span class="p">(</span><span class="s">"+"</span><span class="p">)</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Why MVI?</strong></p>
<ul>
  <li>One immutable state object simplifies reasoning about UI.</li>
  <li>All events go through a single handler (<code class="language-plaintext highlighter-rouge">onIntent</code>), making test coverage straightforward.</li>
  <li>Perfect for complex flows, form validation, and time-travel debugging.</li>
</ul>

<hr />

<h2 id="3-when-to-choose-mvvm-or-mvi">3. When to Choose MVVM or MVI</h2>

<div class="pattern-comparison">
<div class="pattern">
<h3>MVVM</h3>

<div class="section">
<h4>Pros:</h4>
<ul>
<li>Less boilerplate</li>
<li>Easy to pick up</li>
<li>Fast iteration</li>
</ul>
</div>

<hr class="section-divider" />

<div class="section">
<h4>Cons:</h4>
<ul>
<li>State can scatter across multiple flows</li>
<li>Harder to trace complex state changes</li>
</ul>
</div>

<hr class="section-divider" />

<div class="section when-to-use">
<h4>When to Use:</h4>
<ul>
<li>Simple to medium screens</li>
<li>Teams familiar with ViewModel + LiveData/Flow</li>
</ul>
</div>
</div>

<div class="pattern">
<h3>MVI</h3>

<div class="section">
<h4>Pros:</h4>
<ul>
<li>Single source of truth</li>
<li>Predictable, immutable state</li>
<li>Excellent testability</li>
</ul>
</div>

<hr class="section-divider" />

<div class="section">
<h4>Cons:</h4>
<ul>
<li>More code - sealed classes + reducer</li>
<li>Can feel verbose for trivial UIs</li>
</ul>
</div>

<hr class="section-divider" />

<div class="section when-to-use">
<h4>When to Use:</h4>
<ul>
<li>Complex forms or wizards</li>
<li>Heavy-duty state transitions</li>
<li>Need replayable actions</li>
</ul>
</div>
</div>
</div>

<style>
.pattern-comparison {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}
.pattern {
  flex: 1;
  min-width: 300px;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}
.section {
  width: 100%;
}
.when-to-use {
  flex-grow: 1;
}
.pattern h4 {
  margin-bottom: 10px;
}
.section-divider {
  margin: 15px 0;
  border-top: 1px solid #444;
  width: 100%;
}
</style>

<p>Both patterns integrate seamlessly with Compose’s unidirectional rendering. You can even mix them - start with MVVM, then refactor to MVI as your screen’s complexity grows.</p>

<hr />

<h2 id="final-thoughts">Final Thoughts</h2>

<p>There’s no one-size-fits-all. There is no one pattern to rule them all. Consider what’s best for you and your team, screen complexity, code size. Jetpack Compose works well with both of them and both will keep your code clean and maintainable.</p>

<h2 id="related-resources">Related Resources</h2>

<p>If you’re interested in seeing MVI in action with a clean architecture setup for Jetpack Compose, check out my post on <a href="/2025-04-22-clean-compose-setup/">How to Manage State Effectively in Jetpack Compose</a>. It demonstrates practical examples of implementing MVI and proper state management in a real-world Android application.</p>]]></content><author><name>Rafael Skubisz</name></author><category term="tutorials" /><category term="android-development" /><category term="Android" /><category term="Kotlin" /><category term="Jetpack Compose" /><category term="State Management" /><category term="MVVM" /><category term="MVI" /><summary type="html"><![CDATA[The battle between MVVM and MVI never ends! Can they not coexist? Like a quote I like “Make Lovecraft Not Warcraft” we’ll try today to do just that. If you’ve been using Jetpack Compose, you probably heard about MVVM and MVI. Both patterns help improve state management and testability, but they have different approaches when it comes to events and state changes. Today we’ll explore how each one works, show a simple example, and decide which one is the one true king of patterns! Or maybe both are?]]></summary></entry><entry><title type="html">How to Manage State Effectively in Jetpack Compose</title><link href="https://jenovas.github.io/2025-04-22-clean-compose-setup/" rel="alternate" type="text/html" title="How to Manage State Effectively in Jetpack Compose" /><published>2025-04-22T23:52:00+02:00</published><updated>2025-04-22T23:52:00+02:00</updated><id>https://jenovas.github.io/clean-compose-setup</id><content type="html" xml:base="https://jenovas.github.io/2025-04-22-clean-compose-setup/"><![CDATA[<h1 id="state-management-best-practices-in-jetpack-compose">State Management Best Practices in Jetpack Compose</h1>

<p>Managing state properly is one of the biggest challenges in any Android application, especially when using Jetpack Compose. In this post, we’ll explore a setup that keeps your Compose apps clean, manageable, and easy to maintain.</p>

<!--more-->

<hr />

<h2 id="why-good-state-management-matters">Why Good State Management Matters</h2>

<p>Jetpack Compose makes UI development more straightforward, but without a solid strategy your composables can become messy and hard to follow. With effective state management, your app will be:</p>

<ul>
  <li><strong>Easier to understand &amp; maintain</strong></li>
  <li><strong>Simpler to debug &amp; test</strong></li>
  <li><strong>More scalable</strong> as new features are added</li>
</ul>

<p>Below is a step-by-step guide to structuring state in your Compose screens.</p>

<hr />

<h2 id="recommended-practices">Recommended Practices</h2>

<h3 id="1-keep-viewmodels-at-the-top-level">1. Keep ViewModels at the Top Level</h3>

<p>Place your ViewModel only at the top-level composable for each screen. This centralizes business logic and keeps your UI code simple. It also makes it easy to create <code class="language-plaintext highlighter-rouge">@Preview</code> functions using fake states.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">screenModel</span> <span class="p">=</span> <span class="n">getScreenModel</span><span class="p">&lt;</span><span class="nc">CleanSetupScreenModel</span><span class="p">&gt;()</span>
    <span class="nc">CleanSetupScreenContent</span><span class="p">(</span>
        <span class="n">state</span> <span class="p">=</span> <span class="n">screenModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="nf">collectAsStateWithLifecycle</span><span class="p">().</span><span class="n">value</span><span class="p">,</span>
        <span class="n">event</span> <span class="p">=</span> <span class="n">screenModel</span><span class="o">::</span><span class="n">handleEvent</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-use-a-single-stateflow-for-screen-state">2. Use a Single <code class="language-plaintext highlighter-rouge">StateFlow</code> for Screen State</h3>

<p>Rather than juggling multiple state holders, expose <strong>one</strong> <code class="language-plaintext highlighter-rouge">StateFlow</code> that represents the entire screen’s UI state. A sealed class helps manage all possible states:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sealed</span> <span class="kd">class</span> <span class="nc">CleanSetupScreenState</span> <span class="p">{</span>
    <span class="kd">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">()</span>
    <span class="kd">data class</span> <span class="nc">Error</span><span class="p">(</span><span class="kd">val</span> <span class="py">message</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">()</span>
    <span class="kd">data class</span> <span class="nc">Success</span><span class="p">(</span>
        <span class="kd">val</span> <span class="py">someIntValue</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
        <span class="kd">val</span> <span class="py">someStringValue</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
        <span class="kd">val</span> <span class="py">data</span><span class="p">:</span> <span class="nc">CleanSetupDataClass</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>Benefit:</strong> Your composable only needs a single <code class="language-plaintext highlighter-rouge">when</code> block to render every state.</p>
</blockquote>

<h3 id="3-handle-events-with-one-callback">3. Handle Events with One Callback</h3>

<p>Avoid passing dozens of lambdas into your UI. Instead, define a single event callback on your ViewModel:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sealed</span> <span class="kd">class</span> <span class="nc">CleanSetupScreenEvent</span> <span class="p">{</span>
    <span class="kd">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
    <span class="kd">data class</span> <span class="nc">ToggleFavourite</span><span class="p">(</span><span class="kd">val</span> <span class="py">item</span><span class="p">:</span> <span class="nc">CleanSetupDataClass</span><span class="p">)</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
    <span class="kd">object</span> <span class="nc">NavigateBack</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
    <span class="kd">object</span> <span class="nc">NavigateToSettings</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
<span class="p">}</span>

<span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">CleanSetupScreenContent</span><span class="p">(</span>
    <span class="n">state</span><span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">,</span>
    <span class="n">event</span><span class="p">:</span> <span class="p">(</span><span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="c1">// UI here...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Call it like:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CleanSetupScreenContent</span><span class="p">(</span>
    <span class="n">state</span> <span class="p">=</span> <span class="n">state</span><span class="p">,</span>
    <span class="n">event</span> <span class="p">=</span> <span class="n">screenModel</span><span class="o">::</span><span class="n">handleEvent</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="4-use-channels-for-one-time-events">4. Use Channels for One-Time Events</h3>

<p>For navigation, snackbars, or other single-shot effects, channels are perfect:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CleanSetupViewModel</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_effects</span> <span class="p">=</span> <span class="nc">Channel</span><span class="p">&lt;</span><span class="nc">UiEffect</span><span class="p">&gt;()</span>
    <span class="kd">val</span> <span class="py">effects</span> <span class="p">=</span> <span class="n">_effects</span><span class="p">.</span><span class="nf">receiveAsFlow</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">handleEvent</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">NavigateBack</span> <span class="p">-&gt;</span>
                <span class="n">viewModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span> <span class="n">_effects</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateBack</span><span class="p">)</span> <span class="p">}</span>
            <span class="c1">// …</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Collect and act on them in your composable:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">ObserveEffects</span><span class="p">(</span><span class="n">effects</span><span class="p">:</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">UiEffect</span><span class="p">&gt;,</span> <span class="n">navigator</span><span class="p">:</span> <span class="nc">Navigator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">LaunchedEffect</span><span class="p">(</span><span class="n">effects</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">effects</span><span class="p">.</span><span class="nf">collect</span> <span class="p">{</span> <span class="n">effect</span> <span class="p">-&gt;</span>
            <span class="k">when</span> <span class="p">(</span><span class="n">effect</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">is</span> <span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateBack</span> <span class="p">-&gt;</span> <span class="n">navigator</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                <span class="k">is</span> <span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateToSettings</span> <span class="p">-&gt;</span> <span class="n">navigator</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nc">SettingsScreen</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="5-lifecycle-aware-state-collection">5. Lifecycle-Aware State Collection</h3>

<p>Prevent leaks and avoid stale UI by using lifecycle–aware collection:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">state</span> <span class="k">by</span> <span class="n">screenModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="nf">collectAsStateWithLifecycle</span><span class="p">()</span>
</code></pre></div></div>

<p>This automatically ties collection to the composable’s lifecycle.</p>

<hr />

<h2 id="putting-it-all-together">Putting It All Together</h2>

<p>Here’s a concise example showing these practices in action:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Composable</span>
<span class="k">fun</span> <span class="nf">CleanSetupScreenContent</span><span class="p">(</span>
    <span class="n">state</span><span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">,</span>
    <span class="n">event</span><span class="p">:</span> <span class="p">(</span><span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="nc">Scaffold</span><span class="p">(</span>
        <span class="n">topBar</span>    <span class="p">=</span> <span class="p">{</span> <span class="nc">CleanSetupTopBar</span><span class="p">()</span> <span class="p">},</span>
        <span class="n">bottomBar</span> <span class="p">=</span> <span class="p">{</span> <span class="nc">CleanSetupBottomBar</span><span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">)</span> <span class="p">{</span> <span class="n">padding</span> <span class="p">-&gt;</span>
        <span class="nc">Box</span><span class="p">(</span>
            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                <span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">is</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Loading</span> <span class="p">-&gt;</span>
                    <span class="nc">CleanSetupLoadingIndicator</span><span class="p">(</span><span class="nc">Modifier</span><span class="p">.</span><span class="nf">align</span><span class="p">(</span><span class="nc">Alignment</span><span class="p">.</span><span class="nc">Center</span><span class="p">))</span>

                <span class="k">is</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Error</span> <span class="p">-&gt;</span>
                    <span class="nc">CleanSetupError</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">message</span><span class="p">,</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">align</span><span class="p">(</span><span class="nc">Alignment</span><span class="p">.</span><span class="nc">Center</span><span class="p">))</span>

                <span class="k">is</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span> <span class="p">-&gt;</span>
                    <span class="nc">CleanSetupContent</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">event</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="why-this-works">Why This Works</h2>

<ul>
  <li><strong>Debugging</strong> becomes straightforward</li>
  <li><strong>UI code</strong> stays clean and focused</li>
  <li><strong>Testing</strong> is much easier</li>
  <li><strong>Scalability</strong>: you can add new states or events without rewriting every composable</li>
</ul>

<hr />

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Good state management in Jetpack Compose doesn’t have to be complicated. By:</p>

<ol>
  <li>Centralizing ViewModels</li>
  <li>Using a single <code class="language-plaintext highlighter-rouge">StateFlow</code></li>
  <li>Handling events via a sealed callback</li>
  <li>Leveraging channels for one-time effects</li>
  <li>Collecting state lifecycle-aware</li>
</ol>

<p>…you’ll find your Compose apps more robust, maintainable, and enjoyable to develop.</p>

<blockquote>
  <p>Give it a try in your next project and experience the difference!</p>
</blockquote>

<h2 id="full-code">Full Code</h2>

<p>Screen</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">algo.crafter.ui.screens.settings.SettingsScreen</span>
<span class="k">import</span> <span class="nn">algo.crafter.ui.theme.AlgoCrafterSimpleTheme</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.clickable</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.Box</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.Column</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.Spacer</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.fillMaxSize</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.fillMaxWidth</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.height</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.padding</span>
<span class="k">import</span> <span class="nn">androidx.compose.foundation.layout.size</span>
<span class="k">import</span> <span class="nn">androidx.compose.material.icons.Icons</span>
<span class="k">import</span> <span class="nn">androidx.compose.material.icons.filled.Star</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.Button</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.CircularProgressIndicator</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.ExperimentalMaterial3Api</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.Icon</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.LargeTopAppBar</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.MaterialTheme</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.Scaffold</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.Text</span>
<span class="k">import</span> <span class="nn">androidx.compose.material3.TopAppBarDefaults</span>
<span class="k">import</span> <span class="nn">androidx.compose.runtime.Composable</span>
<span class="k">import</span> <span class="nn">androidx.compose.runtime.LaunchedEffect</span>
<span class="k">import</span> <span class="nn">androidx.compose.runtime.getValue</span>
<span class="k">import</span> <span class="nn">androidx.compose.ui.Alignment</span>
<span class="k">import</span> <span class="nn">androidx.compose.ui.Modifier</span>
<span class="k">import</span> <span class="nn">androidx.compose.ui.tooling.preview.Preview</span>
<span class="k">import</span> <span class="nn">androidx.compose.ui.unit.dp</span>
<span class="k">import</span> <span class="nn">androidx.lifecycle.Lifecycle</span>
<span class="k">import</span> <span class="nn">androidx.lifecycle.compose.LocalLifecycleOwner</span>
<span class="k">import</span> <span class="nn">androidx.lifecycle.compose.collectAsStateWithLifecycle</span>
<span class="k">import</span> <span class="nn">androidx.lifecycle.repeatOnLifecycle</span>
<span class="k">import</span> <span class="nn">cafe.adriel.voyager.core.screen.Screen</span>
<span class="k">import</span> <span class="nn">cafe.adriel.voyager.koin.getScreenModel</span>
<span class="k">import</span> <span class="nn">cafe.adriel.voyager.navigator.LocalNavigator</span>
<span class="k">import</span> <span class="nn">cafe.adriel.voyager.navigator.currentOrThrow</span>
<span class="k">import</span> <span class="nn">kotlinx.coroutines.Dispatchers</span>
<span class="k">import</span> <span class="nn">kotlinx.coroutines.flow.Flow</span>
<span class="k">import</span> <span class="nn">kotlinx.coroutines.withContext</span>

<span class="kd">class</span> <span class="nc">CleanSetupScreen</span> <span class="p">:</span> <span class="nc">Screen</span> <span class="p">{</span>
    <span class="nd">@Composable</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">Content</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">navigator</span> <span class="p">=</span> <span class="nc">LocalNavigator</span><span class="p">.</span><span class="n">currentOrThrow</span>
        <span class="kd">val</span> <span class="py">screenModel</span> <span class="p">=</span> <span class="n">getScreenModel</span><span class="p">&lt;</span><span class="nc">CleanSetupScreenModel</span><span class="p">&gt;()</span>
        <span class="kd">val</span> <span class="py">state</span> <span class="k">by</span> <span class="n">screenModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="nf">collectAsStateWithLifecycle</span><span class="p">()</span>
        <span class="kd">val</span> <span class="py">effects</span> <span class="p">=</span> <span class="n">screenModel</span><span class="p">.</span><span class="n">effects</span>

        <span class="nc">ObserveAsEvents</span><span class="p">(</span><span class="n">effects</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">when</span> <span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">is</span> <span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateBack</span> <span class="p">-&gt;</span> <span class="n">navigator</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                <span class="k">is</span> <span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateToSettings</span> <span class="p">-&gt;</span> <span class="n">navigator</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nc">SettingsScreen</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nc">CleanSetupScreenContent</span><span class="p">(</span>
            <span class="n">state</span><span class="p">,</span>
            <span class="n">screenModel</span><span class="o">::</span><span class="n">handleEvent</span>
        <span class="p">)</span>
    <span class="p">}</span>

    <span class="nd">@Composable</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">CleanSetupScreenContent</span><span class="p">(</span>
        <span class="n">state</span><span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">,</span>
        <span class="n">event</span><span class="p">:</span> <span class="p">(</span><span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Scaffold</span><span class="p">(</span>
            <span class="n">topBar</span> <span class="p">=</span> <span class="p">{</span>
                <span class="nc">CleanSetupTopBar</span><span class="p">()</span>
            <span class="p">},</span>
            <span class="n">bottomBar</span> <span class="p">=</span> <span class="p">{</span>
                <span class="nc">CleanSetupBottomBar</span><span class="p">(</span>
                    <span class="n">event</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nc">Box</span><span class="p">(</span>
                <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{</span>
                <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">is</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Error</span> <span class="p">-&gt;</span> <span class="p">{</span>
                        <span class="nc">CleanSetupError</span><span class="p">(</span>
                            <span class="n">error</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">error</span><span class="p">,</span>
                            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">align</span><span class="p">(</span><span class="nc">Alignment</span><span class="p">.</span><span class="nc">Center</span><span class="p">)</span>
                        <span class="p">)</span>
                    <span class="p">}</span>

                    <span class="k">is</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Loading</span> <span class="p">-&gt;</span> <span class="p">{</span>
                        <span class="nc">CleanSetupLoadingIndicator</span><span class="p">(</span>
                            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">align</span><span class="p">(</span><span class="nc">Alignment</span><span class="p">.</span><span class="nc">Center</span><span class="p">)</span>
                        <span class="p">)</span>
                    <span class="p">}</span>

                    <span class="k">is</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span> <span class="p">-&gt;</span> <span class="p">{</span>
                        <span class="nc">CleanSetupContent</span><span class="p">(</span>
                            <span class="n">state</span><span class="p">,</span>
                            <span class="n">event</span>
                        <span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">@OptIn</span><span class="p">(</span><span class="nc">ExperimentalMaterial3Api</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
    <span class="nd">@Composable</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">CleanSetupContent</span><span class="p">(</span>
        <span class="n">state</span><span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span><span class="p">,</span>
        <span class="n">event</span><span class="p">:</span> <span class="p">(</span><span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">Column</span><span class="p">(</span>
            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                <span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">(),</span>
            <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterHorizontally</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nc">Text</span><span class="p">(</span>
                <span class="n">text</span> <span class="p">=</span> <span class="s">"${state.someIntValue}"</span><span class="p">,</span>
                <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">headlineLarge</span><span class="p">,</span>
                <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onSurface</span>
            <span class="p">)</span>

            <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">height</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>

            <span class="nc">Text</span><span class="p">(</span>
                <span class="n">text</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">someStringValue</span><span class="p">,</span>
                <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">displaySmall</span><span class="p">,</span>
                <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onSurface</span>
            <span class="p">)</span>

            <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">height</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>

            <span class="nc">Text</span><span class="p">(</span>
                <span class="n">text</span> <span class="p">=</span> <span class="s">"${state.cleanSetupDataClass.dataClassInt}"</span><span class="p">,</span>
                <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">,</span>
                <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onSurface</span>
            <span class="p">)</span>

            <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">height</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>

            <span class="nc">Text</span><span class="p">(</span>
                <span class="n">text</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">cleanSetupDataClass</span><span class="p">.</span><span class="n">dataClassString</span><span class="p">,</span>
                <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">,</span>
                <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onSurface</span>
            <span class="p">)</span>

            <span class="nc">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">height</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">))</span>

            <span class="kd">val</span> <span class="py">tint</span> <span class="p">=</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">cleanSetupDataClass</span><span class="p">.</span><span class="n">isFavourite</span><span class="p">)</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span> <span class="k">else</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onSurface</span>
            <span class="nc">Icon</span><span class="p">(</span>
                <span class="n">imageVector</span> <span class="p">=</span> <span class="nc">Icons</span><span class="p">.</span><span class="nc">Default</span><span class="p">.</span><span class="nc">Star</span><span class="p">,</span>
                <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">"Star"</span><span class="p">,</span>
                <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                    <span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">48</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">clickable</span> <span class="p">{</span>
                        <span class="nf">event</span><span class="p">(</span>
                            <span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">ToggleFavourite</span><span class="p">(</span>
                                <span class="n">state</span><span class="p">.</span><span class="n">cleanSetupDataClass</span>
                            <span class="p">)</span>
                        <span class="p">)</span>
                    <span class="p">},</span>
                <span class="n">tint</span> <span class="p">=</span> <span class="n">tint</span>
            <span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">@Composable</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">CleanSetupBottomBar</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="p">(</span><span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Button</span><span class="p">(</span>
            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="nf">event</span><span class="p">(</span><span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">NavigateToSettings</span><span class="p">)</span> <span class="p">},</span>
            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>
                <span class="p">.</span><span class="nf">fillMaxWidth</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="mi">16</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nc">Text</span><span class="p">(</span>
                <span class="n">text</span> <span class="p">=</span> <span class="s">"Continue"</span><span class="p">,</span>
                <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">,</span>
                <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onPrimary</span>
            <span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nd">@OptIn</span><span class="p">(</span><span class="nc">ExperimentalMaterial3Api</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
    <span class="nd">@Composable</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">CleanSetupTopBar</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">LargeTopAppBar</span><span class="p">(</span>
            <span class="n">title</span> <span class="p">=</span> <span class="p">{</span> <span class="nc">Text</span><span class="p">(</span><span class="s">"Clean Setup"</span><span class="p">)</span> <span class="p">},</span>
            <span class="n">colors</span> <span class="p">=</span> <span class="nc">TopAppBarDefaults</span><span class="p">.</span><span class="nf">topAppBarColors</span><span class="p">(</span>
                <span class="n">containerColor</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">,</span>
                <span class="n">titleContentColor</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">onPrimary</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>

    <span class="nd">@Composable</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">CleanSetupError</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Text</span><span class="p">(</span>
            <span class="n">text</span> <span class="p">=</span> <span class="n">error</span><span class="p">,</span>
            <span class="n">style</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">bodyLarge</span><span class="p">,</span>
            <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">error</span><span class="p">,</span>
            <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
        <span class="p">)</span>
    <span class="p">}</span>

    <span class="nd">@Composable</span>
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">CleanSetupLoadingIndicator</span><span class="p">(</span><span class="n">modifier</span><span class="p">:</span> <span class="nc">Modifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">CircularProgressIndicator</span><span class="p">(</span>
            <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
            <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">,</span>
            <span class="n">strokeWidth</span> <span class="p">=</span> <span class="mi">4</span><span class="p">.</span><span class="n">dp</span>
        <span class="p">)</span>
    <span class="p">}</span>

    <span class="nd">@Preview</span><span class="p">()</span>
    <span class="nd">@Composable</span>
    <span class="k">fun</span> <span class="nf">CleanSetupScreenPreview</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">AlgoCrafterSimpleTheme</span> <span class="p">{</span>
            <span class="nc">CleanSetupScreenContent</span><span class="p">(</span>
                <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Loading</span>
            <span class="p">)</span> <span class="p">{}</span>
            <span class="nc">CleanSetupScreenContent</span><span class="p">(</span>
                <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Error</span><span class="p">(</span><span class="s">"Error loading data"</span><span class="p">)</span>
            <span class="p">)</span> <span class="p">{}</span>
            <span class="nc">CleanSetupScreenContent</span><span class="p">(</span>
                <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span><span class="p">(</span>
                    <span class="mi">12345</span><span class="p">,</span>
                    <span class="s">"RandomString"</span><span class="p">,</span>
                    <span class="nc">CleanSetupDataClass</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span> <span class="s">"ImportantString"</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
                <span class="p">)</span>
            <span class="p">)</span> <span class="p">{}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nd">@Composable</span>
<span class="k">private</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">ObserveAsEvents</span><span class="p">(</span><span class="n">flow</span><span class="p">:</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;,</span> <span class="n">onEvent</span><span class="p">:</span> <span class="p">(</span><span class="nc">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="nc">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
    <span class="nc">LaunchedEffect</span><span class="p">(</span><span class="n">flow</span><span class="p">,</span> <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lifecycleOwner</span><span class="p">.</span><span class="nf">repeatOnLifecycle</span><span class="p">(</span><span class="nc">Lifecycle</span><span class="p">.</span><span class="nc">State</span><span class="p">.</span><span class="nc">STARTED</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">withContext</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">Main</span><span class="p">.</span><span class="n">immediate</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">flow</span><span class="p">.</span><span class="nf">collect</span><span class="p">(</span><span class="n">onEvent</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ViewModel</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CleanSetupScreenModel</span><span class="p">()</span> <span class="p">:</span> <span class="nc">ScreenModel</span><span class="p">,</span> <span class="nc">KoinComponent</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="nc">MutableStateFlow</span><span class="p">&lt;</span><span class="nc">CleanSetupScreenState</span><span class="p">&gt;(</span><span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Loading</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">state</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">CleanSetupScreenState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">_effects</span> <span class="p">=</span> <span class="nc">Channel</span><span class="p">&lt;</span><span class="nc">UiEffect</span><span class="p">&gt;()</span>
    <span class="kd">val</span> <span class="py">effects</span> <span class="p">=</span> <span class="n">_effects</span><span class="p">.</span><span class="nf">receiveAsFlow</span><span class="p">()</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="nf">refreshData</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">handleEvent</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">is</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">Refresh</span> <span class="p">-&gt;</span> <span class="nf">refreshData</span><span class="p">()</span>
            <span class="k">is</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">ToggleFavourite</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="nf">handeFavouriteEvent</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">clickedDataClass</span><span class="p">)</span>
            <span class="p">}</span>

            <span class="k">is</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">NavigateBack</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="n">screenModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span> <span class="n">_effects</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateBack</span><span class="p">)</span> <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">is</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">.</span><span class="nc">NavigateToSettings</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="n">screenModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span> <span class="n">_effects</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nc">UiEffect</span><span class="p">.</span><span class="nc">NavigateToSettings</span><span class="p">)</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">fun</span> <span class="nf">refreshData</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">screenModelScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="c1">// Simulate loading data</span>
            <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Loading</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span><span class="p">(</span>
                    <span class="mi">12345</span><span class="p">,</span>
                    <span class="s">"RandomString"</span><span class="p">,</span>
                    <span class="nc">CleanSetupDataClass</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span> <span class="s">"ImportantString"</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
                <span class="p">)</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Error</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="nf">orEmpty</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handeFavouriteEvent</span><span class="p">(</span>
        <span class="n">clickedDataClass</span><span class="p">:</span> <span class="nc">CleanSetupDataClass</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">favouriteClass</span> <span class="p">=</span> <span class="n">clickedDataClass</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">isFavourite</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">updatedState</span> <span class="p">=</span>
            <span class="p">(</span><span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="k">as</span><span class="p">?</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span><span class="p">)</span><span class="o">?.</span><span class="nf">copy</span><span class="p">(</span><span class="n">cleanSetupDataClass</span> <span class="p">=</span> <span class="n">favouriteClass</span><span class="p">)</span>
                <span class="o">?:</span> <span class="nc">CleanSetupScreenState</span><span class="p">.</span><span class="nc">Success</span><span class="p">(</span><span class="mi">12345</span><span class="p">,</span> <span class="s">"RandomString"</span><span class="p">,</span> <span class="n">favouriteClass</span><span class="p">)</span>

        <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">updatedState</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">sealed</span> <span class="kd">class</span> <span class="nc">CleanSetupScreenState</span> <span class="p">{</span>
    <span class="kd">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">()</span>

    <span class="kd">data class</span> <span class="nc">Error</span><span class="p">(</span>
        <span class="kd">val</span> <span class="py">error</span><span class="p">:</span> <span class="nc">String</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">()</span>

    <span class="kd">data class</span> <span class="nc">Success</span><span class="p">(</span>
        <span class="kd">val</span> <span class="py">someIntValue</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
        <span class="kd">val</span> <span class="py">someStringValue</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
        <span class="kd">val</span> <span class="py">cleanSetupDataClass</span><span class="p">:</span> <span class="nc">CleanSetupDataClass</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">CleanSetupScreenState</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">CleanSetupDataClass</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">dataClassInt</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">dataClassString</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">isFavourite</span><span class="p">:</span> <span class="nc">Boolean</span>
<span class="p">)</span>

<span class="k">sealed</span> <span class="kd">class</span> <span class="nc">CleanSetupScreenEvent</span> <span class="p">{</span>
    <span class="kd">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
    <span class="kd">data class</span> <span class="nc">ToggleFavourite</span><span class="p">(</span><span class="kd">val</span> <span class="py">clickedDataClass</span><span class="p">:</span> <span class="nc">CleanSetupDataClass</span><span class="p">)</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
    <span class="kd">object</span> <span class="nc">NavigateBack</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
    <span class="kd">object</span> <span class="nc">NavigateToSettings</span> <span class="p">:</span> <span class="nc">CleanSetupScreenEvent</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">sealed</span> <span class="kd">class</span> <span class="nc">UiEffect</span> <span class="p">{</span>
    <span class="kd">object</span> <span class="nc">NavigateBack</span> <span class="p">:</span> <span class="nc">UiEffect</span><span class="p">()</span>
    <span class="kd">object</span> <span class="nc">NavigateToSettings</span> <span class="p">:</span> <span class="nc">UiEffect</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Rafael Skubisz</name></author><category term="tutorials" /><category term="android-development" /><category term="Android" /><category term="Kotlin" /><category term="Jetpack Compose" /><category term="State Management" /><category term="MVI" /><summary type="html"><![CDATA[State Management Best Practices in Jetpack Compose Managing state properly is one of the biggest challenges in any Android application, especially when using Jetpack Compose. In this post, we’ll explore a setup that keeps your Compose apps clean, manageable, and easy to maintain.]]></summary></entry></feed>